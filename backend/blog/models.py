import datetime

from django import forms
from django.db import models
from django.contrib.flatpages.models import FlatPage
from django.contrib.auth.models import User
from django.template.defaultfilters import slugify
from django.utils.translation import gettext_lazy as _
from django.conf import settings

from tinymce import models as tinymce_models
from taggit.managers import TaggableManager


class BlogPost(models.Model):
    author = models.ForeignKey(User, null=True, on_delete=models.DO_NOTHING)
    title = models.CharField(max_length=200, null=False, blank=False)
    subtitle = models.CharField(max_length=1000)
    slug = models.SlugField(
        max_length=100, blank=True, null=True, help_text=_("Auto generated from title field "
                                                           "if not defined.")
    )
    content = tinymce_models.HTMLField()
    tags = TaggableManager(blank=True)
    published = models.BooleanField(default=False)
    featured = models.BooleanField(default=False)
    date = models.DateTimeField(auto_now_add=True)

    # TODO: Maybe add related blogposts field?

    def get_absolute_url(self):
        return f"/{settings.BLOG_ROOT_URL}/{self.slug}"

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.title)
        super(BlogPost, self).save(*args, **kwargs)


class BlogPostAdminForm(forms.ModelForm):
    class Meta:
        model = BlogPost
        fields = ['author', 'title', 'subtitle', 'slug', 'content', 'tags', 'published',
                  'featured']

    def clean(self):
        title = self.cleaned_data["title"]
        slug = self.cleaned_data["slug"]
        if self.instance.slug and self.instance.slug == slug:
            # We end up here if, for instance, we have just edited the blogpost
            # but did not change the slug.
            return

        # If this is a new blog post:
        if not self.instance.id:
            if not BlogPost.objects.filter(slug=slug).exists():
                # unique slug was entered. Great! Leave.
                return
            else:
                # new blogpost with a not-unique title, with no slug:
                if BlogPost.objects.filter(title=title).exists() and not slug:
                    date = datetime.datetime.today()
                    # define slug, add some unique info
                    self.cleaned_data['slug'] = '%s-%i-%i-%i' % (
                        slugify(title), date.year, date.month, date.day)
                    slug = self.cleaned_data['slug']
                # if this is a new blogpost with not-unique slug:
                if BlogPost.objects.filter(slug=slug).exists():
                    raise forms.ValidationError(
                        {'slug': 'Autogenerated slug (title + today\'s date) already exists. Enter '
                                 'unique slug'})

        else:
            if self.instance.slug and self.instance.slug != slug \
                and BlogPost.objects.filter(slug=slug).exists():
                raise forms.ValidationError(
                    {"slug": "Slug already exists. Enter unique slug or leave empty"})
